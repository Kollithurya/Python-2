k-diffent sum:

class Solution:

    def findPairs(self, nums: List[int], k: int) -> int:

        result=set()

        i=0

        j=1

        n=len(nums)

        nums.sort()

        while j<n:

            if nums[j]-nums[i]==k:

                result.add((nums[i],nums[j]))

                i=i+1

                j=i+1

            elif nums[j]-nums[i]>=k:

                i=i+1

                j=i+1

            else:

                j=j+1

        return len(result)

'''

     0  1  2  3  4

     1  1  3  4  5

               i     j

     k=2

     0 2

     2 4

'''

Max Sum Subarray of size K:

Naive approach:

#User function Template for python3

class Solution:

    def maximumSumSubarray (self,K,arr,N):

        # code here 

        maxsum=arr[0]

        for i in range(0,N-K+1):#i=3<4-2+1

            cursum=0

            for j in range(K):#j=2

                cursum=cursum+arr[i+j]

            maxsum=max(cursum,maxsum)

        return maxsum

'''

  0    1   2  3

  100 200 300 400

  maxsum=700

  cs=700

  N=4

  K=2

  N-K+1

'''

optimal solution:

#User function Template for python3

class Solution:

    def maximumSumSubarray (self,K,Arr,N):

        winsum=sum(Arr[:K])

        maxsum=winsum

        for i in range(N-K):#0<5

            winsum=winsum-Arr[i]+Arr[i+K]

            maxsum=max(maxsum,winsum)

        return maxsum

'''       

             n           i          i+K

        0  1  2   3   4  5  6  7  8  

        1  4  2   10  2  3  1  0 20

        k=4

        

        n=9

        winsum=24

        maxsum=24

        

'''        

      

      n elements

      o(n)-worst

      

      optimal

      o(logn)

      o(sqrt(n))

      

      n elements

      worst:

      o(n^2)

      optimal:

      o(n)

      o(nlogn)

#{ 

 # Driver Code Starts

#Initial Template for Python 3

if __name__ == '__main__': 

    t = int (input ())

    for _ in range (t):

        

        N,K = input().split()

        N = int(N)

        K = int(K)

        Arr = list( map(int,input().strip().split(" ")))

        ob = Solution()

        print(ob.maximumSumSubarray(K,Arr,N))

Making elements distinct:

#User function Template for python3

def minSum (arr, n) : 

    #Complete the function

    for i in range(1,n):

        if arr[i]<=arr[i-1]:

            arr[i]=arr[i-1]+1

    return sum(arr)

  

Minimise size subarray sum:

class Solution:

    def minSubArrayLen(self, target: int, nums: List[int]) -> int:

        start=0

        end=0

        cursum=0

        minlength=1000000

        n=len(nums)

        while end<n:#6<6

            cursum=cursum+nums[end]

            end=end+1

            while start<end and cursum>=target:

                cursum=cursum-nums[start]

                start=start+1

                minlength=min(minlength,end-start+1)

        if minlength==1000000:

            return 0

        else:

            return  minlength

'''

        0   1  2    3    4  5

        2  3   1    2   4   3

        target=7

        n=6       start=5<6 and  3>=7

        end=6

        cursum=3

'''

Sliding window:

What is Sliding Window Algorithm?

It is an algorithm where we can fast compute the things which have a fixed window for calculation and we can fetch the result in an optimized manner than using the nested loops(naive approach). The main goal of this algorithm is to reuse the result of one window to compute the result of the next window.

Suppose there is a group of friends of 12 people and they decided to party together but the major concern is who is going to throw that treat. After a lot of discussion among them, they concluded that they are sitting at a round table and the group of three who is sitting adjacent to each other and have the sum of age of every member of that group is maximum among other groups of the same size will pay the bill.

So, to find that group the naive approach would be to consider every person and run a loop for the next three's sum of age but it would take O( 12*3 ) units here. We can use the sliding window technique and could reduce this problem from O(12*3) to O(12). In the next section, we will see how we can use the sliding Window technique to solve this problem.

How to use Sliding Window Technique?

We can use the sliding window technique in the example mentioned above.

At first, we will add the sum of the age of three members and after that, we will keep adding the next one and subtracting the last one so that after every step we can get the sum of the age of three person and we keep comparing the sum. Here the window size is 3 and to compute next group age sum we slide the window. The time complexity of this algorithm is O(12) units and this whole algorithm is Sliding Window Algorith. Most of the sliding window problems can be solved using this algorithm, the portion here which slides every time is the sliding window.

Let's suppose,The students of different ages are:

[21, 23, 24, 22, 22, 21, 26, 23, 22, 21, 24, 20]

And the different windows of 3 people sitting adjacent to each other are - [21,23,24] , [23,24,22] , [24,22,22] , [22,22,21] , [22,21,26] , [21,26,23] , [26,23,22] , [23,22,21] , [22,21,24] , [21,24,20].

The sums here respectively are calculated using the sliding window technique, lets have a look how we approach this problem.

The sum of first three are 21+23+24 = 68, and the rest ones are 68-21+22 = 69, 69-23+22 = 68 and so on till last. Here, we can compare the sums calculated at each step to find the required answer.

Basic Steps to Solve Sliding Window Problems

The steps of using the Sliding window technique are as follows:

Find the size of the window on which the algorithm has to be performed.

Calculate the result of the first window, as we calculate in the naive approach.

Maintain a pointer on the start position.

Then run a loop and keep sliding the window by one step at a time and also sliding that pointer one at a time, and keep track of the results of every window.

Let's see how we can use these steps to solve sliding window problems. Suppose, we have an array of integers arr of n elements and we have to find the maximum sum of m elements in that array.

Example -

We have n = 5, arr[5] = {10,20,10,30,5} and m = 3 Then the result would be 60 (20+10+30).

We have n = 7, arr[7] = {2,10,17,1,9,13,4} and m = 4 Then the result would be 40 (17+1+9+13).

Optimized approach is implemented by using the Sliding Window Technique:

How can we compute the result by applying the sliding window technique :

We calculate the sum of the first m elements of that array and store that sum in a variable named running_sum.

Then we will run a loop linearly on the array till the end and slide the window and keep track of maximum_sum by comparing it with the running_sum every time.

To get the sum of m elements every time for a window we will add the next element and subtract the first element and so on and keep increasing the first pointer also.

This will give us maximum_sum every time.

assignment-1:

https://practice.geeksforgeeks.org/problems/max-sum-subarray-of-size-k5313/1

assignment-2:

https://practice.geeksforgeeks.org/problems/making-elements-distinct3139/1

assignment-3:

https://leetcode.com/problems/minimum-size-subarray-sum/description/
